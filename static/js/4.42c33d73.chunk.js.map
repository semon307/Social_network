{"version":3,"sources":["components/Dialogs/Dialogs.module.css","HOC/withAuthRedirect.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","DialogItem","className","s","dialog","active","id","name","Message","message","maxLength","maxLengthCreator","MessageReduxForm","addMessageAC","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","TextArea","validate","required","Dialogs","dialogsElements","dialogsPage","dialogs","map","d","messageElements","messages","m","dialogsItem","formData","addMessage","textarea","DialogsContainer","compose","dispatch","body"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,mHCQ3MC,EAAkB,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAME,KAAKD,SAGpB,SAASE,EAAqBC,GAQjC,OAD0BC,YAAQN,EAARM,EAN1B,SAA2BC,GACMA,EAAxBL,OAD+C,IACpCM,EADmC,YACtBD,EADsB,YAEnD,OAAKA,EAAML,OACJ,cAACG,EAAD,eAAeG,IADI,cAAC,IAAD,CAAUC,GAAI,gB,4FCHjCC,EAR0B,SAACH,GACtC,OACI,qBAAKI,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,OAAnC,SACI,cAAC,IAAD,CAASL,GAAE,mBAAcF,EAAMQ,IAA/B,SAAsCR,EAAMS,UCEzCC,EANwB,SAACV,GACpC,OACI,qBAAKI,UAAWC,IAAEM,QAAlB,SAA4BX,EAAMW,W,0CCiCpCC,EAAYC,YAAiB,IAY/BC,EAAmBf,YAAQ,KAAM,CAACgB,kBAAfhB,CAA8BiB,YAA+B,CAAEC,KAAM,qBAAvCD,EAXwB,SAAChB,GAC1E,OACI,uBAAMkB,SAAUlB,EAAMmB,aAAtB,UACI,8BAAK,cAACC,EAAA,EAAD,CAAOC,YAAa,0BAA2BC,UAAWC,IAAUd,KAAM,WAC/Ee,SAAU,CAACC,IAAUb,OAErB,8BAAK,2DAMFc,EAvC6B,SAAC1B,GACzC,IAAM2B,EAAkB3B,EAAM4B,YAAYC,QAAQC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAYtB,KAAMsB,EAAEtB,KAAMD,GAAIuB,EAAEvB,QACrFwB,EAAkBhC,EAAM4B,YAAYK,SAASH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAAS1B,GAAI0B,EAAE1B,GAAIG,QAASuB,EAAEvB,aAM1F,OACI,sBAAKP,UAAWC,IAAEwB,QAAlB,UACI,qBAAKzB,UAAWC,IAAE8B,YAAlB,SACKR,IAEL,sBAAKvB,UAAWC,IAAE4B,SAAlB,UACKD,EACD,8BACI,cAAClB,EAAD,CAAkBI,SAZf,SAACkB,GAChBpC,EAAMqC,WAAWD,EAASE,sB,iBCU9BC,EAAmBC,YACnBzC,aAboB,SAACL,GACrB,MAAO,CACHkC,YAAalC,EAAMkC,gBAGA,SAACa,GACxB,MAAO,CACHJ,WAAY,SAACK,GACTD,EAAS1B,YAAa2B,SAM9B7C,IAFmB2C,CAGrBd,GACaa","file":"static/js/4.42c33d73.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogsItem\":\"Dialogs_dialogsItem__8wYI2\",\"dialog\":\"Dialogs_dialog__lk_cw\",\"active\":\"Dialogs_active__2sQhs\",\"messages\":\"Dialogs_messages__1w_Up\",\"message\":\"Dialogs_message__1xIDh\"};","import React, {Component, ComponentType} from \"react\";\nimport {AppStateType} from \"../redux/redux-store\";\nimport {ProfileType} from \"../redux/profile-reducer\";\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\n\ntype mapStateToPropsType = {\n    isAuth: boolean\n}\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\nexport function withAuthRedirect <T>(Component: ComponentType<T>){\n    function RedirectComponent(props: mapStateToPropsType) {\n        let {isAuth, ...restProps} = props;\n        if (!props.isAuth) return <Redirect to={\"/login\"}/>;\n        return <Component {...restProps as T}/>\n    }\n\n    let RedirectedComponent = connect(mapStateToProps)(RedirectComponent)\n    return RedirectedComponent\n\n}","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport s from \"./../Dialogs.module.css\"\nimport {DialogsType} from \"../../../redux/store\";\n\n\nconst DialogItem:React.FC<DialogsType> = (props) => {\n    return (\n        <div className={s.dialog + ' ' + s.active}>\n            <NavLink to={`/dialogs/${props.id}`}>{props.name}</NavLink>\n        </div>\n    )\n}\n\nexport default DialogItem;","import React from \"react\";\n\nimport s from \"./../Dialogs.module.css\"\nimport {MessageType} from \"../../../redux/store\";\n\nconst Message: React.FC<MessageType> = (props) => {\n    return (\n        <div className={s.message}>{props.message}</div>\n    )\n}\n\nexport default Message;","import React from \"react\";\nimport s from \"./Dialogs.module.css\"\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport Message from \"./Message/Message\";\nimport {DispatchToPropsType, MapStateToPropsType} from \"./DialogsContainer\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {connect} from \"react-redux\";\n\nimport {addMessageAC} from \"../../redux/dialogs-reducer\";\nimport {maxLengthCreator, required} from \"../../Utils/Validators/Validator\";\nimport {TextArea} from \"../common/FormsControls/FormsControls\";\n\n\ntype DialogsPropsType = MapStateToPropsType & DispatchToPropsType\nconst Dialogs: React.FC<DialogsPropsType> = (props) => {\n    const dialogsElements = props.dialogsPage.dialogs.map(d => <DialogItem name={d.name} id={d.id} />);\n    const messageElements = props.dialogsPage.messages.map(m => <Message id={m.id} message={m.message} />)\n    const newMessage = React.createRef<HTMLTextAreaElement>();\n    const addMessage = (formData: MessageFormDataType) => {\n        props.addMessage(formData.textarea)\n    }\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItem}>\n                {dialogsElements}\n            </div>\n            <div className={s.messages}>\n                {messageElements}\n                <div>\n                    <MessageReduxForm onSubmit={addMessage}/>\n                </div>\n            </div>\n        </div>\n    )\n}\ntype MessageFormDataType = {\n    textarea: string\n\n}\nconst maxLength = maxLengthCreator(10)\nexport const MessageForm: React.FC<InjectedFormProps<MessageFormDataType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div><Field placeholder={\"Type your message here!\"} component={TextArea} name={\"textarea\"}\n            validate={[required, maxLength]}\n            /></div>\n            <div><button>Send message</button></div>\n\n        </form>\n    )\n}\nlet MessageReduxForm = connect(null, {addMessageAC})(reduxForm<MessageFormDataType>({ form: \"dialogMessageForm\" })(MessageForm))\nexport default Dialogs;","import React from \"react\";\nimport {DialogsPageType} from \"../../redux/store\";\nimport {addMessageAC} from \"../../redux/dialogs-reducer\";\nimport Dialogs from \"./Dialogs\";\n\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {compose, Dispatch} from \"redux\";\nimport {withAuthRedirect} from \"../../HOC/withAuthRedirect\";\n\nexport type MapStateToPropsType = {\n    dialogsPage: DialogsPageType\n}\nexport type DispatchToPropsType = {\n    addMessage: (newMessageText: string) => void\n}\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n    return {\n        dialogsPage: state.dialogsPage,\n    }\n}\nconst mapDispatchToProps = (dispatch: Dispatch): DispatchToPropsType => {\n    return {\n        addMessage: (body: string) => {\n            dispatch(addMessageAC(body))\n        }\n    }\n}\nlet DialogsContainer = compose<React.ComponentType>(\n    connect<MapStateToPropsType, DispatchToPropsType, {}, AppStateType>(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect\n)(Dialogs)\nexport default DialogsContainer;"],"sourceRoot":""}